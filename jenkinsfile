pipeline {
    agent any

    environment {
        CYPRESS_CACHE_FOLDER = "${WORKSPACE}/.cache/Cypress"
    }

    tools {
        nodejs 'node18'
    }

    stages {
        stage('Install Dependencies') {
            steps {
                ansiColor('xterm') {
                    withEnv(["PATH+NODE=${tool 'node18'}/bin"]) {
                        bat 'npm ci'
                    }
                }
            }
        }

        stage('Run Cypress Tests') {
            steps {
                ansiColor('xterm') {
                    withEnv(["PATH+NODE=${tool 'node18'}/bin"]) {
                        bat 'npx cypress run'
                    }
                }
            }
        }

        stage('Generate Cucumber Report') {
            steps {
                ansiColor('xterm') {
                    withEnv(["PATH+NODE=${tool 'node18'}/bin"]) {
                        bat 'node cucumber-html-report.js'
                    }
                }
            }
        }

        stage('Archive Cucumber Report') {
            steps {
                archiveArtifacts artifacts: 'cucumber-html-reports/**', fingerprint: true
            }
        }

        stage('Publish to GitHub Pages') {
            steps {
                script {
                    def reportDir = 'cucumber-html-reports'
                    def ghPagesDir = 'gh-pages-temp'

                    bat "IF EXIST ${ghPagesDir} rmdir /s /q ${ghPagesDir}"
                    bat "mkdir ${ghPagesDir}"

                    withCredentials([string(credentialsId: 'qa-pat', variable: 'GITHUB_TOKEN')]) {
                        // Clone gh-pages branch
                        bat "git clone --branch gh-pages https://x-access-token:${GITHUB_TOKEN}@github.com/ChiranjeeviHeggade/Cypress-Cucumber-E2E.git ${ghPagesDir}"

                        // Clean previous content
                        dir(ghPagesDir) {
                            bat 'git pull origin gh-pages'
                            bat 'powershell -Command "Get-ChildItem -Path . -Recurse -Force | Remove-Item -Recurse -Force"'
                        }

                        // Copy new report
                        bat "xcopy ${reportDir}\\* ${ghPagesDir} /E /I /Y"

                        // Commit & Push
                        dir(ghPagesDir) {
                            bat 'git add .'
                            bat 'git config user.name "jenkins"'
                            bat 'git config user.email "jenkins@local"'
                            bat "git commit -m \"Update Cucumber Report - Build #${env.BUILD_NUMBER}\" || echo No changes to commit"
                            bat "git push origin gh-pages"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                slackSend(
                    channel: '#all-jenkins-test-reports',
                    color: currentBuild.currentResult == 'SUCCESS' ? 'good' : 'danger',
                    message: "Build #${env.BUILD_NUMBER} - ${currentBuild.currentResult}: ${env.JOB_NAME} (<${env.BUILD_URL}|Open>)",
                    tokenCredentialId: 'jenkins-slack-plugin'
                )
            }
        }
    }
}
